/*
 * generated by Xtext
 */
package br.ufc.great.catchml.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import br.ufc.great.catchml.catchML.Declaration;
import br.ufc.great.catchml.catchML.Domainmodel;
import br.ufc.great.catchml.catchML.ExceptionDeclaration;
import br.ufc.great.catchml.catchML.PropertyDeclaration;
import br.ufc.great.catchml.catchML.PropositionDeclaration;
import br.ufc.great.catchml.catchML.PropositionExpressionDeclaration;
import br.ufc.great.catchml.catchML.ScopeDeclaration;
import br.ufc.great.catchml.catchML.SemanticConstraintDeclaration;
import br.ufc.great.catchml.catchML.SituationDeclaration;
import br.ufc.great.catchml.catchML.SystemDeclaration;
import br.ufc.great.catchml.catchML.TransitionConstraintDeclaration;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class CatchMLLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public CatchMLLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	String text(Declaration ele) {
		if(ele instanceof SituationDeclaration)
			return ((SituationDeclaration) ele).getName();
		else if(ele instanceof SemanticConstraintDeclaration)
			return ((SemanticConstraintDeclaration) ele).getName();
		else if(ele instanceof TransitionConstraintDeclaration)
			return ((TransitionConstraintDeclaration) ele).getName();
		else if(ele instanceof ExceptionDeclaration)
			return ((ExceptionDeclaration) ele).getName();
		else if(ele instanceof ScopeDeclaration)
			return ((ScopeDeclaration) ele).getName();
		else if(ele instanceof PropertyDeclaration)
			return ((PropertyDeclaration) ele).getName();
		else 
			return "unknown";
	}
	
	String image(Domainmodel ele) {
		return "cmlfile.png";
	}

	String image(SystemDeclaration ele) {
		return "cmlfile.png";
	}
	
	String text(PropositionExpressionDeclaration ele) {
		return "propositions";
	}

	String image(PropositionExpressionDeclaration ele) {
		return "var.gif";
	}

	// Declaration Images
	
	String image(Declaration ele) {
		return "item.gif";
	}

	String image(SituationDeclaration ele) {
		return "item.gif";
	}
	
	String image(PropositionDeclaration ele) {
		return "item.gif";
	}

	String image(SemanticConstraintDeclaration ele) {
		return "item.gif";
	}

	String image(TransitionConstraintDeclaration ele) {
		return "item.gif";
	}

	String image(ExceptionDeclaration ele) {
		return "item.gif";
	}

	String image(ScopeDeclaration ele) {
		return "item.gif";
	}

	String image(PropertyDeclaration ele) {
		return "item.gif";
	}
}
