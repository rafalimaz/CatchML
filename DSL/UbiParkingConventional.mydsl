use test.*;
system UbiParking {	
	prop  atParkPlace, inMovement, atParkEntrance, atParkExit, hasSmoke, hasSpace, isSprinklerOn, isHot;
	
	situation outOfPark := (!atParkEntrance & !atParkPlace) & !atParkExit;
	//sconstraint allPlacesDisjoined := ((atParkEntrance xor atParkPlace) xor atParkExit) | outOfPark;
	sconstraint allPlacesDisjoined := (((((!atParkEntrance & atParkPlace)|(atParkEntrance & !atParkPlace)) & !atParkExit) | !(((!atParkEntrance & atParkPlace)|(atParkEntrance & !atParkPlace)) & atParkExit)) | outOfPark);
	
	tconstraint t1 := pre outOfPark post !atParkPlace & !atParkExit;
	tconstraint t2 := pre atParkEntrance post !atParkExit;
	tconstraint t3 := pre atParkPlace post !atParkEntrance & !outOfPark;
		
	exception fireException := (isHot & hasSmoke) & !isSprinklerOn;	
	scope fireScope handle (fireException){
		case(inMovement & atParkPlace) catch {
			do isSprinklerOn & (inMovement & atParkExit);
			do isSprinklerOn & (inMovement & outOfPark);
		}
		case(inMovement & atParkExit) catch {
			do isSprinklerOn & (inMovement & outOfPark);			
		} 
	}
	
	exception noSpaceException := inMovement & (atParkPlace & !hasSpace);	
	scope noSpaceScope handle (noSpaceException){
		case(inMovement & atParkPlace) catch {
			do inMovement & atParkExit;			
		}
	}
	
	spec s1 := "EX((((var1 & var2) & (!var3)) & var4))";
}