/*
* generated by Xtext
*/
grammar InternalCatchML;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package br.ufc.great.catchml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.ufc.great.catchml.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.ufc.great.catchml.services.CatchMLGrammarAccess;

}

@parser::members {

 	private CatchMLGrammarAccess grammarAccess;
 	
    public InternalCatchMLParser(TokenStream input, CatchMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Domainmodel";	
   	}
   	
   	@Override
   	protected CatchMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainmodelRule()); }
	 iv_ruleDomainmodel=ruleDomainmodel 
	 { $current=$iv_ruleDomainmodel.current; } 
	 EOF 
;

// Rule Domainmodel
ruleDomainmodel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainmodelAccess().getElementsAbstractElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleAbstractElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainmodelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"AbstractElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	 iv_ruleAbstractElement=ruleAbstractElement 
	 { $current=$iv_ruleAbstractElement.current; } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getSystemDeclarationParserRuleCall()); 
    }
    this_SystemDeclaration_0=ruleSystemDeclaration
    { 
        $current = $this_SystemDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

;







// Entry rule entryRuleSystemDeclaration
entryRuleSystemDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemDeclarationRule()); }
	 iv_ruleSystemDeclaration=ruleSystemDeclaration 
	 { $current=$iv_ruleSystemDeclaration.current; } 
	 EOF 
;

// Rule SystemDeclaration
ruleSystemDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='system' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSystemDeclarationAccess().getSystemKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSystemDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSystemDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSystemDeclarationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemDeclarationAccess().getDeclarationsDeclarationParserRuleCall_3_0()); 
	    }
		lv_declarations_3_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemDeclarationRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_3_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSystemDeclarationAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getPropositionExpressionDeclarationParserRuleCall_0()); 
    }
    this_PropositionExpressionDeclaration_0=rulePropositionExpressionDeclaration
    { 
        $current = $this_PropositionExpressionDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getSituationDeclarationParserRuleCall_1()); 
    }
    this_SituationDeclaration_1=ruleSituationDeclaration
    { 
        $current = $this_SituationDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getSemanticConstraintDeclarationParserRuleCall_2()); 
    }
    this_SemanticConstraintDeclaration_2=ruleSemanticConstraintDeclaration
    { 
        $current = $this_SemanticConstraintDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getTransitionConstraintDeclarationParserRuleCall_3()); 
    }
    this_TransitionConstraintDeclaration_3=ruleTransitionConstraintDeclaration
    { 
        $current = $this_TransitionConstraintDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getExceptionDeclarationParserRuleCall_4()); 
    }
    this_ExceptionDeclaration_4=ruleExceptionDeclaration
    { 
        $current = $this_ExceptionDeclaration_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getScopeDeclarationParserRuleCall_5()); 
    }
    this_ScopeDeclaration_5=ruleScopeDeclaration
    { 
        $current = $this_ScopeDeclaration_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getPropertyDeclarationParserRuleCall_6()); 
    }
    this_PropertyDeclaration_6=rulePropertyDeclaration
    { 
        $current = $this_PropertyDeclaration_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePropositionExpressionDeclaration
entryRulePropositionExpressionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropositionExpressionDeclarationRule()); }
	 iv_rulePropositionExpressionDeclaration=rulePropositionExpressionDeclaration 
	 { $current=$iv_rulePropositionExpressionDeclaration.current; } 
	 EOF 
;

// Rule PropositionExpressionDeclaration
rulePropositionExpressionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='prop' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropositionExpressionDeclarationAccess().getPropKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropositionExpressionDeclarationAccess().getArgsPropositionDeclarationParserRuleCall_1_0()); 
	    }
		lv_args_1_0=rulePropositionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropositionExpressionDeclarationRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_1_0, 
        		"PropositionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropositionExpressionDeclarationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropositionExpressionDeclarationAccess().getArgsPropositionDeclarationParserRuleCall_2_1_0()); 
	    }
		lv_args_3_0=rulePropositionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropositionExpressionDeclarationRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"PropositionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPropositionExpressionDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRulePropositionDeclaration
entryRulePropositionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropositionDeclarationRule()); }
	 iv_rulePropositionDeclaration=rulePropositionDeclaration 
	 { $current=$iv_rulePropositionDeclaration.current; } 
	 EOF 
;

// Rule PropositionDeclaration
rulePropositionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPropositionDeclarationAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropositionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleSituationDeclaration
entryRuleSituationDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSituationDeclarationRule()); }
	 iv_ruleSituationDeclaration=ruleSituationDeclaration 
	 { $current=$iv_ruleSituationDeclaration.current; } 
	 EOF 
;

// Rule SituationDeclaration
ruleSituationDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='situation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSituationDeclarationAccess().getSituationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSituationDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSituationDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSituationDeclarationAccess().getColonEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSituationDeclarationAccess().getExpressionLogicExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSituationDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSituationDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleSemanticConstraintDeclaration
entryRuleSemanticConstraintDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSemanticConstraintDeclarationRule()); }
	 iv_ruleSemanticConstraintDeclaration=ruleSemanticConstraintDeclaration 
	 { $current=$iv_ruleSemanticConstraintDeclaration.current; } 
	 EOF 
;

// Rule SemanticConstraintDeclaration
ruleSemanticConstraintDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sconstraint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSemanticConstraintDeclarationAccess().getSconstraintKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSemanticConstraintDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSemanticConstraintDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSemanticConstraintDeclarationAccess().getColonEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSemanticConstraintDeclarationAccess().getExpressionLogicExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSemanticConstraintDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSemanticConstraintDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleTransitionConstraintDeclaration
entryRuleTransitionConstraintDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionConstraintDeclarationRule()); }
	 iv_ruleTransitionConstraintDeclaration=ruleTransitionConstraintDeclaration 
	 { $current=$iv_ruleTransitionConstraintDeclaration.current; } 
	 EOF 
;

// Rule TransitionConstraintDeclaration
ruleTransitionConstraintDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='tconstraint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionConstraintDeclarationAccess().getTconstraintKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTransitionConstraintDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionConstraintDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransitionConstraintDeclarationAccess().getColonEqualsSignKeyword_2());
    }
	otherlv_3='pre' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransitionConstraintDeclarationAccess().getPreKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionConstraintDeclarationAccess().getLeftLogicExpressionParserRuleCall_4_0()); 
	    }
		lv_left_4_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionConstraintDeclarationRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_4_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='post' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransitionConstraintDeclarationAccess().getPostKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionConstraintDeclarationAccess().getRightLogicExpressionParserRuleCall_6_0()); 
	    }
		lv_right_6_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionConstraintDeclarationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTransitionConstraintDeclarationAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleExceptionDeclaration
entryRuleExceptionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExceptionDeclarationRule()); }
	 iv_ruleExceptionDeclaration=ruleExceptionDeclaration 
	 { $current=$iv_ruleExceptionDeclaration.current; } 
	 EOF 
;

// Rule ExceptionDeclaration
ruleExceptionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='exception' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExceptionDeclarationAccess().getExceptionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getExceptionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExceptionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExceptionDeclarationAccess().getColonEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExceptionDeclarationAccess().getExpressionLogicExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExceptionDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExceptionDeclarationAccess().getSemicolonKeyword_4());
    }
)
;







// Entry rule entryRuleScopeDeclaration
entryRuleScopeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScopeDeclarationRule()); }
	 iv_ruleScopeDeclaration=ruleScopeDeclaration 
	 { $current=$iv_ruleScopeDeclaration.current; } 
	 EOF 
;

// Rule ScopeDeclaration
ruleScopeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='scope' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScopeDeclarationAccess().getScopeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getScopeDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScopeDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='handle' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getScopeDeclarationAccess().getHandleKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getScopeDeclarationAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getScopeDeclarationRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getScopeDeclarationAccess().getExceptionExceptionDeclarationCrossReference_4_0()); 
	}

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getScopeDeclarationAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getScopeDeclarationAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScopeDeclarationAccess().getHandlersHandlerDeclarationParserRuleCall_7_0()); 
	    }
		lv_handlers_7_0=ruleHandlerDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeDeclarationRule());
	        }
       		add(
       			$current, 
       			"handlers",
        		lv_handlers_7_0, 
        		"HandlerDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getScopeDeclarationAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleHandlerDeclaration
entryRuleHandlerDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHandlerDeclarationRule()); }
	 iv_ruleHandlerDeclaration=ruleHandlerDeclaration 
	 { $current=$iv_ruleHandlerDeclaration.current; } 
	 EOF 
;

// Rule HandlerDeclaration
ruleHandlerDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getHandlerDeclarationAccess().getCaseKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHandlerDeclarationAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHandlerDeclarationAccess().getExpressionLogicExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHandlerDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getHandlerDeclarationAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getHandlerDeclarationAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHandlerDeclarationAccess().getActionsActionDeclarationParserRuleCall_5_0()); 
	    }
		lv_actions_5_0=ruleActionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHandlerDeclarationRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_5_0, 
        		"ActionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getHandlerDeclarationAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleActionDeclaration
entryRuleActionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionDeclarationRule()); }
	 iv_ruleActionDeclaration=ruleActionDeclaration 
	 { $current=$iv_ruleActionDeclaration.current; } 
	 EOF 
;

// Rule ActionDeclaration
ruleActionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActionDeclarationAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionDeclarationAccess().getExpressionLogicExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActionDeclarationAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRulePropertyDeclaration
entryRulePropertyDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyDeclarationRule()); }
	 iv_rulePropertyDeclaration=rulePropertyDeclaration 
	 { $current=$iv_rulePropertyDeclaration.current; } 
	 EOF 
;

// Rule PropertyDeclaration
rulePropertyDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='spec' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropertyDeclarationAccess().getSpecKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPropertyDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyDeclarationAccess().getColonEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDeclarationAccess().getExpressionTemporalLogicExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleTemporalLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"TemporalLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPropertyDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleLogicExpression
entryRuleLogicExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicExpressionRule()); }
	 iv_ruleLogicExpression=ruleLogicExpression 
	 { $current=$iv_ruleLogicExpression.current; } 
	 EOF 
;

// Rule LogicExpression
ruleLogicExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getLogicExpressionAccess().getOrExpressionParserRuleCall()); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionAccess().getOrOpExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'||' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getOrExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "||");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getAndOpExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'&&' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "&&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getRelationalOpExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'->' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getRelationalExpressionAccess().getOpHyphenMinusGreaterThanSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'<->' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getRelationalExpressionAccess().getOpLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAdditiveExpressionAccess().getUnaryOpExpressionAction_0_0(),
            $current);
    }
)(
(
		lv_op_1_0=	'!' 
    {
        newLeafNode(lv_op_1_0, grammarAccess.getAdditiveExpressionAccess().getOpExclamationMarkKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_0, "!");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExprPrimaryExpressionParserRuleCall_0_2_0()); 
	    }
		lv_expr_2_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getPrimaryExpressionParserRuleCall_1()); 
    }
    this_PrimaryExpression_3=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExprLogicExpressionParserRuleCall_0_1_0()); 
	    }
		lv_expr_1_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2());
    }
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getPrimaryExpressionAccess().getValueAbstractDeclarationCrossReference_1_0()); 
	}

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getOpBinBINARYOPERATOREnumRuleCall_2_0_0()); 
	    }
		lv_opBin_4_0=ruleBINARYOPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"opBin",
        		lv_opBin_4_0, 
        		"BINARYOPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLeftLogicExpressionParserRuleCall_2_2_0()); 
	    }
		lv_left_6_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_6_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPrimaryExpressionAccess().getCommaKeyword_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getRightLogicExpressionParserRuleCall_2_4_0()); 
	    }
		lv_right_8_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_8_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_5());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getOpMulMULTIPLEOPERATOREnumRuleCall_3_0_0()); 
	    }
		lv_opMul_10_0=ruleMULTIPLEOPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"opMul",
        		lv_opMul_10_0, 
        		"MULTIPLEOPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='(' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArgsLogicExpressionParserRuleCall_3_2_0()); 
	    }
		lv_args_12_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_12_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getPrimaryExpressionAccess().getCommaKeyword_3_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArgsLogicExpressionParserRuleCall_3_3_1_0()); 
	    }
		lv_args_14_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_14_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_15=')' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_4());
    }
))
;





// Entry rule entryRuleTemporalLogicExpression
entryRuleTemporalLogicExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemporalLogicExpressionRule()); }
	 iv_ruleTemporalLogicExpression=ruleTemporalLogicExpression 
	 { $current=$iv_ruleTemporalLogicExpression.current; } 
	 EOF 
;

// Rule TemporalLogicExpression
ruleTemporalLogicExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTemporalLogicExpressionAccess().getTemporalOrExpressionParserRuleCall()); 
    }
    this_TemporalOrExpression_0=ruleTemporalOrExpression
    { 
        $current = $this_TemporalOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleTemporalOrExpression
entryRuleTemporalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemporalOrExpressionRule()); }
	 iv_ruleTemporalOrExpression=ruleTemporalOrExpression 
	 { $current=$iv_ruleTemporalOrExpression.current; } 
	 EOF 
;

// Rule TemporalOrExpression
ruleTemporalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTemporalOrExpressionAccess().getTemporalAndExpressionParserRuleCall_0()); 
    }
    this_TemporalAndExpression_0=ruleTemporalAndExpression
    { 
        $current = $this_TemporalAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTemporalOrExpressionAccess().getOrOpExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'||' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getTemporalOrExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalOrExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "||");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalOrExpressionAccess().getRightTemporalAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleTemporalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"TemporalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTemporalAndExpression
entryRuleTemporalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemporalAndExpressionRule()); }
	 iv_ruleTemporalAndExpression=ruleTemporalAndExpression 
	 { $current=$iv_ruleTemporalAndExpression.current; } 
	 EOF 
;

// Rule TemporalAndExpression
ruleTemporalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTemporalAndExpressionAccess().getTemporalRelationalExpressionParserRuleCall_0()); 
    }
    this_TemporalRelationalExpression_0=ruleTemporalRelationalExpression
    { 
        $current = $this_TemporalRelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTemporalAndExpressionAccess().getAndOpExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'&&' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getTemporalAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalAndExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "&&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalAndExpressionAccess().getRightTemporalRelationalExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleTemporalRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"TemporalRelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTemporalRelationalExpression
entryRuleTemporalRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemporalRelationalExpressionRule()); }
	 iv_ruleTemporalRelationalExpression=ruleTemporalRelationalExpression 
	 { $current=$iv_ruleTemporalRelationalExpression.current; } 
	 EOF 
;

// Rule TemporalRelationalExpression
ruleTemporalRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTemporalRelationalExpressionAccess().getTemporalAdditiveExpressionParserRuleCall_0()); 
    }
    this_TemporalAdditiveExpression_0=ruleTemporalAdditiveExpression
    { 
        $current = $this_TemporalAdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTemporalRelationalExpressionAccess().getRelationalOpExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'->' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getTemporalRelationalExpressionAccess().getOpHyphenMinusGreaterThanSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'<->' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getTemporalRelationalExpressionAccess().getOpLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalRelationalExpressionAccess().getRightTemporalAdditiveExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleTemporalAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"TemporalAdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTemporalAdditiveExpression
entryRuleTemporalAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemporalAdditiveExpressionRule()); }
	 iv_ruleTemporalAdditiveExpression=ruleTemporalAdditiveExpression 
	 { $current=$iv_ruleTemporalAdditiveExpression.current; } 
	 EOF 
;

// Rule TemporalAdditiveExpression
ruleTemporalAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTemporalAdditiveExpressionAccess().getUnaryOpExpressionAction_0_0(),
            $current);
    }
)(
(
		lv_op_1_0=	'!' 
    {
        newLeafNode(lv_op_1_0, grammarAccess.getTemporalAdditiveExpressionAccess().getOpExclamationMarkKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalAdditiveExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_0, "!");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalAdditiveExpressionAccess().getExprTemporalPrimaryExpressionParserRuleCall_0_2_0()); 
	    }
		lv_expr_2_0=ruleTemporalPrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"TemporalPrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getTemporalAdditiveExpressionAccess().getTemporalPrimaryExpressionParserRuleCall_1()); 
    }
    this_TemporalPrimaryExpression_3=ruleTemporalPrimaryExpression
    { 
        $current = $this_TemporalPrimaryExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTemporalPrimaryExpression
entryRuleTemporalPrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemporalPrimaryExpressionRule()); }
	 iv_ruleTemporalPrimaryExpression=ruleTemporalPrimaryExpression 
	 { $current=$iv_ruleTemporalPrimaryExpression.current; } 
	 EOF 
;

// Rule TemporalPrimaryExpression
ruleTemporalPrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTemporalPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalPrimaryExpressionAccess().getExprTemporalLogicExpressionParserRuleCall_0_1_0()); 
	    }
		lv_expr_1_0=ruleTemporalLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"TemporalLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTemporalPrimaryExpressionAccess().getRightParenthesisKeyword_0_2());
    }
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalPrimaryExpressionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getTemporalPrimaryExpressionAccess().getValueAbstractDeclarationCrossReference_1_0()); 
	}

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalPrimaryExpressionAccess().getOpTempTEMPORALOPERATOREnumRuleCall_2_0_0()); 
	    }
		lv_opTemp_4_0=ruleTEMPORALOPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"opTemp",
        		lv_opTemp_4_0, 
        		"TEMPORALOPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTemporalPrimaryExpressionAccess().getLeftParenthesisKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalPrimaryExpressionAccess().getTemporalTemporalLogicExpressionParserRuleCall_2_2_0()); 
	    }
		lv_temporal_6_0=ruleTemporalLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"temporal",
        		lv_temporal_6_0, 
        		"TemporalLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTemporalPrimaryExpressionAccess().getRightParenthesisKeyword_2_3());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalPrimaryExpressionAccess().getOpTempUntilTEMPUNTILOPERATOREnumRuleCall_3_0_0()); 
	    }
		lv_opTempUntil_8_0=ruleTEMPUNTILOPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"opTempUntil",
        		lv_opTempUntil_8_0, 
        		"TEMPUNTILOPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='(' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTemporalPrimaryExpressionAccess().getLeftParenthesisKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalPrimaryExpressionAccess().getLeftExpTemporalLogicExpressionParserRuleCall_3_2_0()); 
	    }
		lv_leftExp_10_0=ruleTemporalLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"leftExp",
        		lv_leftExp_10_0, 
        		"TemporalLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='U' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTemporalPrimaryExpressionAccess().getUKeyword_3_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalPrimaryExpressionAccess().getRightExpTemporalLogicExpressionParserRuleCall_3_4_0()); 
	    }
		lv_rightExp_12_0=ruleTemporalLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExp",
        		lv_rightExp_12_0, 
        		"TemporalLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13=')' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTemporalPrimaryExpressionAccess().getRightParenthesisKeyword_3_5());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalPrimaryExpressionAccess().getOpBinBINARYOPERATOREnumRuleCall_4_0_0()); 
	    }
		lv_opBin_14_0=ruleBINARYOPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"opBin",
        		lv_opBin_14_0, 
        		"BINARYOPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_15='(' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTemporalPrimaryExpressionAccess().getLeftParenthesisKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalPrimaryExpressionAccess().getLeftLogicExpressionParserRuleCall_4_2_0()); 
	    }
		lv_left_16_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_16_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17=',' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getTemporalPrimaryExpressionAccess().getCommaKeyword_4_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalPrimaryExpressionAccess().getRightLogicExpressionParserRuleCall_4_4_0()); 
	    }
		lv_right_18_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_18_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_19=')' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getTemporalPrimaryExpressionAccess().getRightParenthesisKeyword_4_5());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalPrimaryExpressionAccess().getOpMulMULTIPLEOPERATOREnumRuleCall_5_0_0()); 
	    }
		lv_opMul_20_0=ruleMULTIPLEOPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"opMul",
        		lv_opMul_20_0, 
        		"MULTIPLEOPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_21='(' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getTemporalPrimaryExpressionAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalPrimaryExpressionAccess().getArgsLogicExpressionParserRuleCall_5_2_0()); 
	    }
		lv_args_22_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalPrimaryExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_22_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_23=',' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getTemporalPrimaryExpressionAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalPrimaryExpressionAccess().getArgsLogicExpressionParserRuleCall_5_3_1_0()); 
	    }
		lv_args_24_0=ruleLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalPrimaryExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_24_0, 
        		"LogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_25=')' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getTemporalPrimaryExpressionAccess().getRightParenthesisKeyword_5_4());
    }
))
;





// Rule MULTIPLEOPERATOR
ruleMULTIPLEOPERATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='xor' 
	{
        $current = grammarAccess.getMULTIPLEOPERATORAccess().getXorEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMULTIPLEOPERATORAccess().getXorEnumLiteralDeclaration()); 
    }
);



// Rule BINARYOPERATOR
ruleBINARYOPERATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='nor' 
	{
        $current = grammarAccess.getBINARYOPERATORAccess().getNorEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBINARYOPERATORAccess().getNorEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='nand' 
	{
        $current = grammarAccess.getBINARYOPERATORAccess().getNandEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBINARYOPERATORAccess().getNandEnumLiteralDeclaration_1()); 
    }
));



// Rule TEMPORALOPERATOR
ruleTEMPORALOPERATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='EX' 
	{
        $current = grammarAccess.getTEMPORALOPERATORAccess().getEXEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTEMPORALOPERATORAccess().getEXEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='EG' 
	{
        $current = grammarAccess.getTEMPORALOPERATORAccess().getEGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTEMPORALOPERATORAccess().getEGEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='EF' 
	{
        $current = grammarAccess.getTEMPORALOPERATORAccess().getEFEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTEMPORALOPERATORAccess().getEFEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='AX' 
	{
        $current = grammarAccess.getTEMPORALOPERATORAccess().getAXEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTEMPORALOPERATORAccess().getAXEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='AG' 
	{
        $current = grammarAccess.getTEMPORALOPERATORAccess().getAGEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getTEMPORALOPERATORAccess().getAGEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='AF' 
	{
        $current = grammarAccess.getTEMPORALOPERATORAccess().getAFEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getTEMPORALOPERATORAccess().getAFEnumLiteralDeclaration_5()); 
    }
));



// Rule TEMPUNTILOPERATOR
ruleTEMPUNTILOPERATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='E' 
	{
        $current = grammarAccess.getTEMPUNTILOPERATORAccess().getEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTEMPUNTILOPERATORAccess().getEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='A' 
	{
        $current = grammarAccess.getTEMPUNTILOPERATORAccess().getAEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTEMPUNTILOPERATORAccess().getAEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


