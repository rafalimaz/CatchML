/*
* generated by Xtext
*/

package br.ufc.great.catchml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CatchMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domainmodel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Domainmodel:
		//
		//	elements+=AbstractElement*;
		public ParserRule getRule() { return rule; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final RuleCall cSystemDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *PackageDeclaration:
		//
		//  'package' name = QualifiedName '{'
		//
		//    (elements += AbstractElement)*
		//
		//  '}'
		//
		//;* / AbstractElement: / *Import |* / SystemDeclaration;
		public ParserRule getRule() { return rule; }

		/// *Import |* / SystemDeclaration
		public RuleCall getSystemDeclarationParserRuleCall() { return cSystemDeclarationParserRuleCall; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class SystemDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		//
		//Import:
		//
		//  'use' importedNamespace = QualifiedNameWithWildcard ';'
		//
		//; * / / *
		//
		//QualifiedNameWithWildcard:
		//
		//  QualifiedName '.*'?
		//
		//;* / // BEGIN - MODEL
		//
		//SystemDeclaration:
		//
		//	"system" name=ID "{" declarations+=Declaration* "}";
		public ParserRule getRule() { return rule; }

		//"system" name=ID "{" declarations+=Declaration* "}"
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropositionExpressionDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSituationDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSemanticConstraintDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTransitionConstraintDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExceptionDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cScopeDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPropertyDeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Declaration:
		//
		//	PropositionExpressionDeclaration | SituationDeclaration | SemanticConstraintDeclaration |
		//
		//	TransitionConstraintDeclaration | ExceptionDeclaration | ScopeDeclaration | PropertyDeclaration;
		public ParserRule getRule() { return rule; }

		//PropositionExpressionDeclaration | SituationDeclaration | SemanticConstraintDeclaration |
		//
		//TransitionConstraintDeclaration | ExceptionDeclaration | ScopeDeclaration | PropertyDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//PropositionExpressionDeclaration
		public RuleCall getPropositionExpressionDeclarationParserRuleCall_0() { return cPropositionExpressionDeclarationParserRuleCall_0; }

		//SituationDeclaration
		public RuleCall getSituationDeclarationParserRuleCall_1() { return cSituationDeclarationParserRuleCall_1; }

		//SemanticConstraintDeclaration
		public RuleCall getSemanticConstraintDeclarationParserRuleCall_2() { return cSemanticConstraintDeclarationParserRuleCall_2; }

		//TransitionConstraintDeclaration
		public RuleCall getTransitionConstraintDeclarationParserRuleCall_3() { return cTransitionConstraintDeclarationParserRuleCall_3; }

		//ExceptionDeclaration
		public RuleCall getExceptionDeclarationParserRuleCall_4() { return cExceptionDeclarationParserRuleCall_4; }

		//ScopeDeclaration
		public RuleCall getScopeDeclarationParserRuleCall_5() { return cScopeDeclarationParserRuleCall_5; }

		//PropertyDeclaration
		public RuleCall getPropertyDeclarationParserRuleCall_6() { return cPropertyDeclarationParserRuleCall_6; }
	}

	public class PropositionExpressionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropositionExpressionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsPropositionDeclarationParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgsPropositionDeclarationParserRuleCall_2_1_0 = (RuleCall)cArgsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// END - MODEL
		//
		//PropositionExpressionDeclaration:
		//
		//	"prop" args+=PropositionDeclaration ("," args+=PropositionDeclaration)* ";";
		public ParserRule getRule() { return rule; }

		//"prop" args+=PropositionDeclaration ("," args+=PropositionDeclaration)* ";"
		public Group getGroup() { return cGroup; }

		//"prop"
		public Keyword getPropKeyword_0() { return cPropKeyword_0; }

		//args+=PropositionDeclaration
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }

		//PropositionDeclaration
		public RuleCall getArgsPropositionDeclarationParserRuleCall_1_0() { return cArgsPropositionDeclarationParserRuleCall_1_0; }

		//("," args+=PropositionDeclaration)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//args+=PropositionDeclaration
		public Assignment getArgsAssignment_2_1() { return cArgsAssignment_2_1; }

		//PropositionDeclaration
		public RuleCall getArgsPropositionDeclarationParserRuleCall_2_1_0() { return cArgsPropositionDeclarationParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class PropositionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropositionDeclaration");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PropositionDeclaration:
		//
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class SituationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SituationDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSituationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionLogicExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SituationDeclaration:
		//
		//	"situation" name=ID ":=" expression=LogicExpression ";";
		public ParserRule getRule() { return rule; }

		//"situation" name=ID ":=" expression=LogicExpression ";"
		public Group getGroup() { return cGroup; }

		//"situation"
		public Keyword getSituationKeyword_0() { return cSituationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//expression=LogicExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//LogicExpression
		public RuleCall getExpressionLogicExpressionParserRuleCall_3_0() { return cExpressionLogicExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SemanticConstraintDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SemanticConstraintDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSconstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionLogicExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SemanticConstraintDeclaration:
		//
		//	"sconstraint" name=ID ":=" expression=LogicExpression ";";
		public ParserRule getRule() { return rule; }

		//"sconstraint" name=ID ":=" expression=LogicExpression ";"
		public Group getGroup() { return cGroup; }

		//"sconstraint"
		public Keyword getSconstraintKeyword_0() { return cSconstraintKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//expression=LogicExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//LogicExpression
		public RuleCall getExpressionLogicExpressionParserRuleCall_3_0() { return cExpressionLogicExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TransitionConstraintDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionConstraintDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTconstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPreKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeftAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLeftLogicExpressionParserRuleCall_4_0 = (RuleCall)cLeftAssignment_4.eContents().get(0);
		private final Keyword cPostKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRightLogicExpressionParserRuleCall_6_0 = (RuleCall)cRightAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TransitionConstraintDeclaration:
		//
		//	"tconstraint" name=ID ":=" "pre" left=LogicExpression "post" right=LogicExpression ";";
		public ParserRule getRule() { return rule; }

		//"tconstraint" name=ID ":=" "pre" left=LogicExpression "post" right=LogicExpression ";"
		public Group getGroup() { return cGroup; }

		//"tconstraint"
		public Keyword getTconstraintKeyword_0() { return cTconstraintKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//"pre"
		public Keyword getPreKeyword_3() { return cPreKeyword_3; }

		//left=LogicExpression
		public Assignment getLeftAssignment_4() { return cLeftAssignment_4; }

		//LogicExpression
		public RuleCall getLeftLogicExpressionParserRuleCall_4_0() { return cLeftLogicExpressionParserRuleCall_4_0; }

		//"post"
		public Keyword getPostKeyword_5() { return cPostKeyword_5; }

		//right=LogicExpression
		public Assignment getRightAssignment_6() { return cRightAssignment_6; }

		//LogicExpression
		public RuleCall getRightLogicExpressionParserRuleCall_6_0() { return cRightLogicExpressionParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class ExceptionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExceptionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionLogicExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExceptionDeclaration:
		//
		//	"exception" name=ID ":=" expression=LogicExpression ";";
		public ParserRule getRule() { return rule; }

		//"exception" name=ID ":=" expression=LogicExpression ";"
		public Group getGroup() { return cGroup; }

		//"exception"
		public Keyword getExceptionKeyword_0() { return cExceptionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//expression=LogicExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//LogicExpression
		public RuleCall getExpressionLogicExpressionParserRuleCall_3_0() { return cExpressionLogicExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class AbstractDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropositionDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSituationDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractDeclaration:
		//
		//	PropositionDeclaration | SituationDeclaration;
		public ParserRule getRule() { return rule; }

		//PropositionDeclaration | SituationDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//PropositionDeclaration
		public RuleCall getPropositionDeclarationParserRuleCall_0() { return cPropositionDeclarationParserRuleCall_0; }

		//SituationDeclaration
		public RuleCall getSituationDeclarationParserRuleCall_1() { return cSituationDeclarationParserRuleCall_1; }
	}

	public class ScopeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScopeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScopeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHandleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExceptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cExceptionExceptionDeclarationCrossReference_4_0 = (CrossReference)cExceptionAssignment_4.eContents().get(0);
		private final RuleCall cExceptionExceptionDeclarationIDTerminalRuleCall_4_0_1 = (RuleCall)cExceptionExceptionDeclarationCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cHandlersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cHandlersHandlerDeclarationParserRuleCall_7_0 = (RuleCall)cHandlersAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// BEGIN - HANDLERS
		//
		//ScopeDeclaration:
		//
		//	"scope" name=ID "handle" "(" exception=[ExceptionDeclaration] ")" "{" handlers+=HandlerDeclaration+ "}";
		public ParserRule getRule() { return rule; }

		//"scope" name=ID "handle" "(" exception=[ExceptionDeclaration] ")" "{" handlers+=HandlerDeclaration+ "}"
		public Group getGroup() { return cGroup; }

		//"scope"
		public Keyword getScopeKeyword_0() { return cScopeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"handle"
		public Keyword getHandleKeyword_2() { return cHandleKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//exception=[ExceptionDeclaration]
		public Assignment getExceptionAssignment_4() { return cExceptionAssignment_4; }

		//[ExceptionDeclaration]
		public CrossReference getExceptionExceptionDeclarationCrossReference_4_0() { return cExceptionExceptionDeclarationCrossReference_4_0; }

		//ID
		public RuleCall getExceptionExceptionDeclarationIDTerminalRuleCall_4_0_1() { return cExceptionExceptionDeclarationIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//handlers+=HandlerDeclaration+
		public Assignment getHandlersAssignment_7() { return cHandlersAssignment_7; }

		//HandlerDeclaration
		public RuleCall getHandlersHandlerDeclarationParserRuleCall_7_0() { return cHandlersHandlerDeclarationParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class HandlerDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HandlerDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionLogicExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsActionDeclarationParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//HandlerDeclaration:
		//
		//	"case" "(" expression=LogicExpression ")" "{" actions+=ActionDeclaration+ //(propagation=PropagationDeclaration)?
		//
		//	"}";
		public ParserRule getRule() { return rule; }

		//"case" "(" expression=LogicExpression ")" "{" actions+=ActionDeclaration+ //(propagation=PropagationDeclaration)?
		//
		//"}"
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=LogicExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//LogicExpression
		public RuleCall getExpressionLogicExpressionParserRuleCall_2_0() { return cExpressionLogicExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//actions+=ActionDeclaration+
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }

		//ActionDeclaration
		public RuleCall getActionsActionDeclarationParserRuleCall_5_0() { return cActionsActionDeclarationParserRuleCall_5_0; }

		////(propagation=PropagationDeclaration)?
		//
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ActionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ActionDeclaration:
		//
		//	"do" expression=LogicExpression ";";
		public ParserRule getRule() { return rule; }

		//"do" expression=LogicExpression ";"
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//expression=LogicExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//LogicExpression
		public RuleCall getExpressionLogicExpressionParserRuleCall_1_0() { return cExpressionLogicExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class PropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionTemporalLogicExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *PropagationDeclaration:
		//
		//	SignalDeclaration | RaiseDeclaration
		//
		//;
		//
		//
		//
		//SignalDeclaration:
		//
		//	'signal' '(' exception = [ExceptionDeclaration] ')' 'to' scope=[ScopeDeclaration] ';'
		//
		//;
		//
		//
		//
		//RaiseDeclaration:
		//
		//	'raise' '(' exception = [ExceptionDeclaration] ')'';'
		//
		//;* / //END - HANDLERS
		//
		//PropertyDeclaration:
		//
		//	"spec" name=ID ":=" expression=TemporalLogicExpression ";";
		public ParserRule getRule() { return rule; }

		//"spec" name=ID ":=" expression=TemporalLogicExpression ";"
		public Group getGroup() { return cGroup; }

		//"spec"
		public Keyword getSpecKeyword_0() { return cSpecKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//expression=TemporalLogicExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//TemporalLogicExpression
		public RuleCall getExpressionTemporalLogicExpressionParserRuleCall_3_0() { return cExpressionTemporalLogicExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class LogicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicExpression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////BEGIN - LOGIC EXPRESSIONS
		//
		//LogicExpression:
		//
		//	OrExpression;
		public ParserRule getRule() { return rule; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrOpExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression returns LogicExpression:
		//
		//	AndExpression ({OrOpExpression.left=current} op="||" right=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression ({OrOpExpression.left=current} op="||" right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({OrOpExpression.left=current} op="||" right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrOpExpression.left=current}
		public Action getOrOpExpressionLeftAction_1_0() { return cOrOpExpressionLeftAction_1_0; }

		//op="||"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"||"
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }

		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndOpExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression returns LogicExpression:
		//
		//	RelationalExpression ({AndOpExpression.left=current} op="&&" right=RelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//RelationalExpression ({AndOpExpression.left=current} op="&&" right=RelationalExpression)*
		public Group getGroup() { return cGroup; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//({AndOpExpression.left=current} op="&&" right=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndOpExpression.left=current}
		public Action getAndOpExpressionLeftAction_1_0() { return cAndOpExpressionLeftAction_1_0; }

		//op="&&"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"&&"
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }

		//right=RelationalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//RelationalExpression
		public RuleCall getRightRelationalExpressionParserRuleCall_1_2_0() { return cRightRelationalExpressionParserRuleCall_1_2_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationalOpExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpHyphenMinusGreaterThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RelationalExpression returns LogicExpression:
		//
		//	AdditiveExpression ({RelationalOpExpression.left=current} op=("->" | "<->") right=AdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//AdditiveExpression ({RelationalOpExpression.left=current} op=("->" | "<->") right=AdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//({RelationalOpExpression.left=current} op=("->" | "<->") right=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{RelationalOpExpression.left=current}
		public Action getRelationalOpExpressionLeftAction_1_0() { return cRelationalOpExpressionLeftAction_1_0; }

		//op=("->" | "<->")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"->" | "<->"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"->"
		public Keyword getOpHyphenMinusGreaterThanSignKeyword_1_1_0_0() { return cOpHyphenMinusGreaterThanSignKeyword_1_1_0_0; }

		//"<->"
		public Keyword getOpLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_1() { return cOpLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_1; }

		//right=AdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_2_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryOpExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOpExclamationMarkKeyword_0_1_0 = (Keyword)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprPrimaryExpressionParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AdditiveExpression returns LogicExpression:
		//
		//	{UnaryOpExpression} op="!" expr=PrimaryExpression | PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//{UnaryOpExpression} op="!" expr=PrimaryExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryOpExpression} op="!" expr=PrimaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryOpExpression}
		public Action getUnaryOpExpressionAction_0_0() { return cUnaryOpExpressionAction_0_0; }

		//op="!"
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//"!"
		public Keyword getOpExclamationMarkKeyword_0_1_0() { return cOpExclamationMarkKeyword_0_1_0; }

		//expr=PrimaryExpression
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//PrimaryExpression
		public RuleCall getExprPrimaryExpressionParserRuleCall_0_2_0() { return cExprPrimaryExpressionParserRuleCall_0_2_0; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExprLogicExpressionParserRuleCall_0_1_0 = (RuleCall)cExprAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cValueAbstractDeclarationCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueAbstractDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cValueAbstractDeclarationCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOpBinAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOpBinBINARYOPERATOREnumRuleCall_2_0_0 = (RuleCall)cOpBinAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLeftAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLeftLogicExpressionParserRuleCall_2_2_0 = (RuleCall)cLeftAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cRightAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cRightLogicExpressionParserRuleCall_2_4_0 = (RuleCall)cRightAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cOpMulAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOpMulMULTIPLEOPERATOREnumRuleCall_3_0_0 = (RuleCall)cOpMulAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cArgsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cArgsLogicExpressionParserRuleCall_3_2_0 = (RuleCall)cArgsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cArgsLogicExpressionParserRuleCall_3_3_1_0 = (RuleCall)cArgsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//PrimaryExpression returns LogicExpression:
		//
		//	"(" expr=LogicExpression ")" | value=[AbstractDeclaration] | opBin=BINARYOPERATOR "(" left=LogicExpression ","
		//
		//	right=LogicExpression ")" | opMul=MULTIPLEOPERATOR "(" args+=LogicExpression ("," args+=LogicExpression)+ ")";
		public ParserRule getRule() { return rule; }

		//"(" expr=LogicExpression ")" | value=[AbstractDeclaration] | opBin=BINARYOPERATOR "(" left=LogicExpression ","
		//
		//right=LogicExpression ")" | opMul=MULTIPLEOPERATOR "(" args+=LogicExpression ("," args+=LogicExpression)+ ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" expr=LogicExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//expr=LogicExpression
		public Assignment getExprAssignment_0_1() { return cExprAssignment_0_1; }

		//LogicExpression
		public RuleCall getExprLogicExpressionParserRuleCall_0_1_0() { return cExprLogicExpressionParserRuleCall_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//value=[AbstractDeclaration]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//[AbstractDeclaration]
		public CrossReference getValueAbstractDeclarationCrossReference_1_0() { return cValueAbstractDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getValueAbstractDeclarationIDTerminalRuleCall_1_0_1() { return cValueAbstractDeclarationIDTerminalRuleCall_1_0_1; }

		//opBin=BINARYOPERATOR "(" left=LogicExpression "," right=LogicExpression ")"
		public Group getGroup_2() { return cGroup_2; }

		//opBin=BINARYOPERATOR
		public Assignment getOpBinAssignment_2_0() { return cOpBinAssignment_2_0; }

		//BINARYOPERATOR
		public RuleCall getOpBinBINARYOPERATOREnumRuleCall_2_0_0() { return cOpBinBINARYOPERATOREnumRuleCall_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//left=LogicExpression
		public Assignment getLeftAssignment_2_2() { return cLeftAssignment_2_2; }

		//LogicExpression
		public RuleCall getLeftLogicExpressionParserRuleCall_2_2_0() { return cLeftLogicExpressionParserRuleCall_2_2_0; }

		//","
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }

		//right=LogicExpression
		public Assignment getRightAssignment_2_4() { return cRightAssignment_2_4; }

		//LogicExpression
		public RuleCall getRightLogicExpressionParserRuleCall_2_4_0() { return cRightLogicExpressionParserRuleCall_2_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }

		//opMul=MULTIPLEOPERATOR "(" args+=LogicExpression ("," args+=LogicExpression)+ ")"
		public Group getGroup_3() { return cGroup_3; }

		//opMul=MULTIPLEOPERATOR
		public Assignment getOpMulAssignment_3_0() { return cOpMulAssignment_3_0; }

		//MULTIPLEOPERATOR
		public RuleCall getOpMulMULTIPLEOPERATOREnumRuleCall_3_0_0() { return cOpMulMULTIPLEOPERATOREnumRuleCall_3_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//args+=LogicExpression
		public Assignment getArgsAssignment_3_2() { return cArgsAssignment_3_2; }

		//LogicExpression
		public RuleCall getArgsLogicExpressionParserRuleCall_3_2_0() { return cArgsLogicExpressionParserRuleCall_3_2_0; }

		//("," args+=LogicExpression)+
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//args+=LogicExpression
		public Assignment getArgsAssignment_3_3_1() { return cArgsAssignment_3_3_1; }

		//LogicExpression
		public RuleCall getArgsLogicExpressionParserRuleCall_3_3_1_0() { return cArgsLogicExpressionParserRuleCall_3_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}

	public class TemporalLogicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemporalLogicExpression");
		private final RuleCall cTemporalOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// BEGIN - TEMPORAL LOGIC EXPRESSIONS
		//
		//TemporalLogicExpression returns LogicExpression:
		//
		//	TemporalOrExpression;
		public ParserRule getRule() { return rule; }

		//TemporalOrExpression
		public RuleCall getTemporalOrExpressionParserRuleCall() { return cTemporalOrExpressionParserRuleCall; }
	}

	public class TemporalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemporalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTemporalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrOpExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTemporalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//TemporalOrExpression returns LogicExpression:
		//
		//	TemporalAndExpression ({OrOpExpression.left=current} op="||" right=TemporalAndExpression)*;
		public ParserRule getRule() { return rule; }

		//TemporalAndExpression ({OrOpExpression.left=current} op="||" right=TemporalAndExpression)*
		public Group getGroup() { return cGroup; }

		//TemporalAndExpression
		public RuleCall getTemporalAndExpressionParserRuleCall_0() { return cTemporalAndExpressionParserRuleCall_0; }

		//({OrOpExpression.left=current} op="||" right=TemporalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrOpExpression.left=current}
		public Action getOrOpExpressionLeftAction_1_0() { return cOrOpExpressionLeftAction_1_0; }

		//op="||"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"||"
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }

		//right=TemporalAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//TemporalAndExpression
		public RuleCall getRightTemporalAndExpressionParserRuleCall_1_2_0() { return cRightTemporalAndExpressionParserRuleCall_1_2_0; }
	}

	public class TemporalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemporalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTemporalRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndOpExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTemporalRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//TemporalAndExpression returns LogicExpression:
		//
		//	TemporalRelationalExpression ({AndOpExpression.left=current} op="&&" right=TemporalRelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//TemporalRelationalExpression ({AndOpExpression.left=current} op="&&" right=TemporalRelationalExpression)*
		public Group getGroup() { return cGroup; }

		//TemporalRelationalExpression
		public RuleCall getTemporalRelationalExpressionParserRuleCall_0() { return cTemporalRelationalExpressionParserRuleCall_0; }

		//({AndOpExpression.left=current} op="&&" right=TemporalRelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndOpExpression.left=current}
		public Action getAndOpExpressionLeftAction_1_0() { return cAndOpExpressionLeftAction_1_0; }

		//op="&&"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"&&"
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }

		//right=TemporalRelationalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//TemporalRelationalExpression
		public RuleCall getRightTemporalRelationalExpressionParserRuleCall_1_2_0() { return cRightTemporalRelationalExpressionParserRuleCall_1_2_0; }
	}

	public class TemporalRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemporalRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTemporalAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationalOpExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpHyphenMinusGreaterThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTemporalAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//TemporalRelationalExpression returns LogicExpression:
		//
		//	TemporalAdditiveExpression ({RelationalOpExpression.left=current} op=("->" | "<->")
		//
		//	right=TemporalAdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//TemporalAdditiveExpression ({RelationalOpExpression.left=current} op=("->" | "<->") right=TemporalAdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//TemporalAdditiveExpression
		public RuleCall getTemporalAdditiveExpressionParserRuleCall_0() { return cTemporalAdditiveExpressionParserRuleCall_0; }

		//({RelationalOpExpression.left=current} op=("->" | "<->") right=TemporalAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{RelationalOpExpression.left=current}
		public Action getRelationalOpExpressionLeftAction_1_0() { return cRelationalOpExpressionLeftAction_1_0; }

		//op=("->" | "<->")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"->" | "<->"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"->"
		public Keyword getOpHyphenMinusGreaterThanSignKeyword_1_1_0_0() { return cOpHyphenMinusGreaterThanSignKeyword_1_1_0_0; }

		//"<->"
		public Keyword getOpLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_1() { return cOpLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_1; }

		//right=TemporalAdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//TemporalAdditiveExpression
		public RuleCall getRightTemporalAdditiveExpressionParserRuleCall_1_2_0() { return cRightTemporalAdditiveExpressionParserRuleCall_1_2_0; }
	}

	public class TemporalAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemporalAdditiveExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryOpExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOpExclamationMarkKeyword_0_1_0 = (Keyword)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprTemporalPrimaryExpressionParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cTemporalPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TemporalAdditiveExpression returns LogicExpression:
		//
		//	{UnaryOpExpression} op="!" expr=TemporalPrimaryExpression | TemporalPrimaryExpression;
		public ParserRule getRule() { return rule; }

		//{UnaryOpExpression} op="!" expr=TemporalPrimaryExpression | TemporalPrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryOpExpression} op="!" expr=TemporalPrimaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryOpExpression}
		public Action getUnaryOpExpressionAction_0_0() { return cUnaryOpExpressionAction_0_0; }

		//op="!"
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//"!"
		public Keyword getOpExclamationMarkKeyword_0_1_0() { return cOpExclamationMarkKeyword_0_1_0; }

		//expr=TemporalPrimaryExpression
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//TemporalPrimaryExpression
		public RuleCall getExprTemporalPrimaryExpressionParserRuleCall_0_2_0() { return cExprTemporalPrimaryExpressionParserRuleCall_0_2_0; }

		//TemporalPrimaryExpression
		public RuleCall getTemporalPrimaryExpressionParserRuleCall_1() { return cTemporalPrimaryExpressionParserRuleCall_1; }
	}

	public class TemporalPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemporalPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExprTemporalLogicExpressionParserRuleCall_0_1_0 = (RuleCall)cExprAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cValueAbstractDeclarationCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueAbstractDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cValueAbstractDeclarationCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOpTempAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOpTempTEMPORALOPERATOREnumRuleCall_2_0_0 = (RuleCall)cOpTempAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTemporalAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTemporalTemporalLogicExpressionParserRuleCall_2_2_0 = (RuleCall)cTemporalAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cOpTempUntilAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOpTempUntilTEMPUNTILOPERATOREnumRuleCall_3_0_0 = (RuleCall)cOpTempUntilAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cLeftExpAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLeftExpTemporalLogicExpressionParserRuleCall_3_2_0 = (RuleCall)cLeftExpAssignment_3_2.eContents().get(0);
		private final Keyword cUKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cRightExpAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cRightExpTemporalLogicExpressionParserRuleCall_3_4_0 = (RuleCall)cRightExpAssignment_3_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cOpBinAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOpBinBINARYOPERATOREnumRuleCall_4_0_0 = (RuleCall)cOpBinAssignment_4_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cLeftAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cLeftLogicExpressionParserRuleCall_4_2_0 = (RuleCall)cLeftAssignment_4_2.eContents().get(0);
		private final Keyword cCommaKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cRightAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cRightLogicExpressionParserRuleCall_4_4_0 = (RuleCall)cRightAssignment_4_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cOpMulAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cOpMulMULTIPLEOPERATOREnumRuleCall_5_0_0 = (RuleCall)cOpMulAssignment_5_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cArgsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cArgsLogicExpressionParserRuleCall_5_2_0 = (RuleCall)cArgsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cArgsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cArgsLogicExpressionParserRuleCall_5_3_1_0 = (RuleCall)cArgsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		
		//TemporalPrimaryExpression returns LogicExpression:
		//
		//	"(" expr=TemporalLogicExpression ")" | value=[AbstractDeclaration] | opTemp=TEMPORALOPERATOR "("
		//
		//	temporal=TemporalLogicExpression ")" | opTempUntil=TEMPUNTILOPERATOR "(" leftExp=TemporalLogicExpression "U"
		//
		//	rightExp=TemporalLogicExpression ")" | opBin=BINARYOPERATOR "(" left=LogicExpression "," right=LogicExpression ")" |
		//
		//	opMul=MULTIPLEOPERATOR "(" args+=LogicExpression ("," args+=LogicExpression)+ ")";
		public ParserRule getRule() { return rule; }

		//"(" expr=TemporalLogicExpression ")" | value=[AbstractDeclaration] | opTemp=TEMPORALOPERATOR "("
		//
		//temporal=TemporalLogicExpression ")" | opTempUntil=TEMPUNTILOPERATOR "(" leftExp=TemporalLogicExpression "U"
		//
		//rightExp=TemporalLogicExpression ")" | opBin=BINARYOPERATOR "(" left=LogicExpression "," right=LogicExpression ")" |
		//
		//opMul=MULTIPLEOPERATOR "(" args+=LogicExpression ("," args+=LogicExpression)+ ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" expr=TemporalLogicExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//expr=TemporalLogicExpression
		public Assignment getExprAssignment_0_1() { return cExprAssignment_0_1; }

		//TemporalLogicExpression
		public RuleCall getExprTemporalLogicExpressionParserRuleCall_0_1_0() { return cExprTemporalLogicExpressionParserRuleCall_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//value=[AbstractDeclaration]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//[AbstractDeclaration]
		public CrossReference getValueAbstractDeclarationCrossReference_1_0() { return cValueAbstractDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getValueAbstractDeclarationIDTerminalRuleCall_1_0_1() { return cValueAbstractDeclarationIDTerminalRuleCall_1_0_1; }

		//opTemp=TEMPORALOPERATOR "(" temporal=TemporalLogicExpression ")"
		public Group getGroup_2() { return cGroup_2; }

		//opTemp=TEMPORALOPERATOR
		public Assignment getOpTempAssignment_2_0() { return cOpTempAssignment_2_0; }

		//TEMPORALOPERATOR
		public RuleCall getOpTempTEMPORALOPERATOREnumRuleCall_2_0_0() { return cOpTempTEMPORALOPERATOREnumRuleCall_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//temporal=TemporalLogicExpression
		public Assignment getTemporalAssignment_2_2() { return cTemporalAssignment_2_2; }

		//TemporalLogicExpression
		public RuleCall getTemporalTemporalLogicExpressionParserRuleCall_2_2_0() { return cTemporalTemporalLogicExpressionParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//opTempUntil=TEMPUNTILOPERATOR "(" leftExp=TemporalLogicExpression "U" rightExp=TemporalLogicExpression ")"
		public Group getGroup_3() { return cGroup_3; }

		//opTempUntil=TEMPUNTILOPERATOR
		public Assignment getOpTempUntilAssignment_3_0() { return cOpTempUntilAssignment_3_0; }

		//TEMPUNTILOPERATOR
		public RuleCall getOpTempUntilTEMPUNTILOPERATOREnumRuleCall_3_0_0() { return cOpTempUntilTEMPUNTILOPERATOREnumRuleCall_3_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//leftExp=TemporalLogicExpression
		public Assignment getLeftExpAssignment_3_2() { return cLeftExpAssignment_3_2; }

		//TemporalLogicExpression
		public RuleCall getLeftExpTemporalLogicExpressionParserRuleCall_3_2_0() { return cLeftExpTemporalLogicExpressionParserRuleCall_3_2_0; }

		//"U"
		public Keyword getUKeyword_3_3() { return cUKeyword_3_3; }

		//rightExp=TemporalLogicExpression
		public Assignment getRightExpAssignment_3_4() { return cRightExpAssignment_3_4; }

		//TemporalLogicExpression
		public RuleCall getRightExpTemporalLogicExpressionParserRuleCall_3_4_0() { return cRightExpTemporalLogicExpressionParserRuleCall_3_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }

		//opBin=BINARYOPERATOR "(" left=LogicExpression "," right=LogicExpression ")"
		public Group getGroup_4() { return cGroup_4; }

		//opBin=BINARYOPERATOR
		public Assignment getOpBinAssignment_4_0() { return cOpBinAssignment_4_0; }

		//BINARYOPERATOR
		public RuleCall getOpBinBINARYOPERATOREnumRuleCall_4_0_0() { return cOpBinBINARYOPERATOREnumRuleCall_4_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//left=LogicExpression
		public Assignment getLeftAssignment_4_2() { return cLeftAssignment_4_2; }

		//LogicExpression
		public RuleCall getLeftLogicExpressionParserRuleCall_4_2_0() { return cLeftLogicExpressionParserRuleCall_4_2_0; }

		//","
		public Keyword getCommaKeyword_4_3() { return cCommaKeyword_4_3; }

		//right=LogicExpression
		public Assignment getRightAssignment_4_4() { return cRightAssignment_4_4; }

		//LogicExpression
		public RuleCall getRightLogicExpressionParserRuleCall_4_4_0() { return cRightLogicExpressionParserRuleCall_4_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_5() { return cRightParenthesisKeyword_4_5; }

		//opMul=MULTIPLEOPERATOR "(" args+=LogicExpression ("," args+=LogicExpression)+ ")"
		public Group getGroup_5() { return cGroup_5; }

		//opMul=MULTIPLEOPERATOR
		public Assignment getOpMulAssignment_5_0() { return cOpMulAssignment_5_0; }

		//MULTIPLEOPERATOR
		public RuleCall getOpMulMULTIPLEOPERATOREnumRuleCall_5_0_0() { return cOpMulMULTIPLEOPERATOREnumRuleCall_5_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//args+=LogicExpression
		public Assignment getArgsAssignment_5_2() { return cArgsAssignment_5_2; }

		//LogicExpression
		public RuleCall getArgsLogicExpressionParserRuleCall_5_2_0() { return cArgsLogicExpressionParserRuleCall_5_2_0; }

		//("," args+=LogicExpression)+
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//args+=LogicExpression
		public Assignment getArgsAssignment_5_3_1() { return cArgsAssignment_5_3_1; }

		//LogicExpression
		public RuleCall getArgsLogicExpressionParserRuleCall_5_3_1_0() { return cArgsLogicExpressionParserRuleCall_5_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
	}
	
	
	public class MULTIPLEOPERATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MULTIPLEOPERATOR");
		private final EnumLiteralDeclaration cXorEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cXorXorKeyword_0 = (Keyword)cXorEnumLiteralDeclaration.eContents().get(0);
		
		//// BEGIN - Enums
		//
		//enum MULTIPLEOPERATOR:
		//
		//	xor;
		public EnumRule getRule() { return rule; }

		//xor
		public EnumLiteralDeclaration getXorEnumLiteralDeclaration() { return cXorEnumLiteralDeclaration; }

		//"xor"
		public Keyword getXorXorKeyword_0() { return cXorXorKeyword_0; }
	}

	public class BINARYOPERATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BINARYOPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNorEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNorNorKeyword_0_0 = (Keyword)cNorEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNandEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNandNandKeyword_1_0 = (Keyword)cNandEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BINARYOPERATOR:
		//
		//	nor | nand;
		public EnumRule getRule() { return rule; }

		//nor | nand
		public Alternatives getAlternatives() { return cAlternatives; }

		//nor
		public EnumLiteralDeclaration getNorEnumLiteralDeclaration_0() { return cNorEnumLiteralDeclaration_0; }

		//"nor"
		public Keyword getNorNorKeyword_0_0() { return cNorNorKeyword_0_0; }

		//nand
		public EnumLiteralDeclaration getNandEnumLiteralDeclaration_1() { return cNandEnumLiteralDeclaration_1; }

		//"nand"
		public Keyword getNandNandKeyword_1_0() { return cNandNandKeyword_1_0; }
	}

	public class TEMPORALOPERATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TEMPORALOPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEXEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEXEXKeyword_0_0 = (Keyword)cEXEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEGEGKeyword_1_0 = (Keyword)cEGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEFEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEFEFKeyword_2_0 = (Keyword)cEFEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAXEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAXAXKeyword_3_0 = (Keyword)cAXEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cAGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cAGAGKeyword_4_0 = (Keyword)cAGEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cAFEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cAFAFKeyword_5_0 = (Keyword)cAFEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum TEMPORALOPERATOR:
		//
		//	EX | EG | EF | AX | AG | AF;
		public EnumRule getRule() { return rule; }

		//EX | EG | EF | AX | AG | AF
		public Alternatives getAlternatives() { return cAlternatives; }

		//EX
		public EnumLiteralDeclaration getEXEnumLiteralDeclaration_0() { return cEXEnumLiteralDeclaration_0; }

		//"EX"
		public Keyword getEXEXKeyword_0_0() { return cEXEXKeyword_0_0; }

		//EG
		public EnumLiteralDeclaration getEGEnumLiteralDeclaration_1() { return cEGEnumLiteralDeclaration_1; }

		//"EG"
		public Keyword getEGEGKeyword_1_0() { return cEGEGKeyword_1_0; }

		//EF
		public EnumLiteralDeclaration getEFEnumLiteralDeclaration_2() { return cEFEnumLiteralDeclaration_2; }

		//"EF"
		public Keyword getEFEFKeyword_2_0() { return cEFEFKeyword_2_0; }

		//AX
		public EnumLiteralDeclaration getAXEnumLiteralDeclaration_3() { return cAXEnumLiteralDeclaration_3; }

		//"AX"
		public Keyword getAXAXKeyword_3_0() { return cAXAXKeyword_3_0; }

		//AG
		public EnumLiteralDeclaration getAGEnumLiteralDeclaration_4() { return cAGEnumLiteralDeclaration_4; }

		//"AG"
		public Keyword getAGAGKeyword_4_0() { return cAGAGKeyword_4_0; }

		//AF
		public EnumLiteralDeclaration getAFEnumLiteralDeclaration_5() { return cAFEnumLiteralDeclaration_5; }

		//"AF"
		public Keyword getAFAFKeyword_5_0() { return cAFAFKeyword_5_0; }
	}

	public class TEMPUNTILOPERATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TEMPUNTILOPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEEKeyword_0_0 = (Keyword)cEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAAKeyword_1_0 = (Keyword)cAEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TEMPUNTILOPERATOR:
		//
		//	E | A;
		public EnumRule getRule() { return rule; }

		//E | A
		public Alternatives getAlternatives() { return cAlternatives; }

		//E
		public EnumLiteralDeclaration getEEnumLiteralDeclaration_0() { return cEEnumLiteralDeclaration_0; }

		//"E"
		public Keyword getEEKeyword_0_0() { return cEEKeyword_0_0; }

		//A
		public EnumLiteralDeclaration getAEnumLiteralDeclaration_1() { return cAEnumLiteralDeclaration_1; }

		//"A"
		public Keyword getAAKeyword_1_0() { return cAAKeyword_1_0; }
	}
	
	private DomainmodelElements pDomainmodel;
	private AbstractElementElements pAbstractElement;
	private QualifiedNameElements pQualifiedName;
	private SystemDeclarationElements pSystemDeclaration;
	private DeclarationElements pDeclaration;
	private PropositionExpressionDeclarationElements pPropositionExpressionDeclaration;
	private PropositionDeclarationElements pPropositionDeclaration;
	private SituationDeclarationElements pSituationDeclaration;
	private SemanticConstraintDeclarationElements pSemanticConstraintDeclaration;
	private TransitionConstraintDeclarationElements pTransitionConstraintDeclaration;
	private ExceptionDeclarationElements pExceptionDeclaration;
	private AbstractDeclarationElements pAbstractDeclaration;
	private ScopeDeclarationElements pScopeDeclaration;
	private HandlerDeclarationElements pHandlerDeclaration;
	private ActionDeclarationElements pActionDeclaration;
	private PropertyDeclarationElements pPropertyDeclaration;
	private LogicExpressionElements pLogicExpression;
	private OrExpressionElements pOrExpression;
	private AndExpressionElements pAndExpression;
	private RelationalExpressionElements pRelationalExpression;
	private AdditiveExpressionElements pAdditiveExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private TemporalLogicExpressionElements pTemporalLogicExpression;
	private TemporalOrExpressionElements pTemporalOrExpression;
	private TemporalAndExpressionElements pTemporalAndExpression;
	private TemporalRelationalExpressionElements pTemporalRelationalExpression;
	private TemporalAdditiveExpressionElements pTemporalAdditiveExpression;
	private TemporalPrimaryExpressionElements pTemporalPrimaryExpression;
	private MULTIPLEOPERATORElements unknownRuleMULTIPLEOPERATOR;
	private BINARYOPERATORElements unknownRuleBINARYOPERATOR;
	private TEMPORALOPERATORElements unknownRuleTEMPORALOPERATOR;
	private TEMPUNTILOPERATORElements unknownRuleTEMPUNTILOPERATOR;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CatchMLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufc.great.catchml.CatchML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//
	//	elements+=AbstractElement*;
	public DomainmodelElements getDomainmodelAccess() {
		return (pDomainmodel != null) ? pDomainmodel : (pDomainmodel = new DomainmodelElements());
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}

	/// *PackageDeclaration:
	//
	//  'package' name = QualifiedName '{'
	//
	//    (elements += AbstractElement)*
	//
	//  '}'
	//
	//;* / AbstractElement: / *Import |* / SystemDeclaration;
	public AbstractElementElements getAbstractElementAccess() {
		return (pAbstractElement != null) ? pAbstractElement : (pAbstractElement = new AbstractElementElements());
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//QualifiedName:
	//
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	/// *
	//
	//Import:
	//
	//  'use' importedNamespace = QualifiedNameWithWildcard ';'
	//
	//; * / / *
	//
	//QualifiedNameWithWildcard:
	//
	//  QualifiedName '.*'?
	//
	//;* / // BEGIN - MODEL
	//
	//SystemDeclaration:
	//
	//	"system" name=ID "{" declarations+=Declaration* "}";
	public SystemDeclarationElements getSystemDeclarationAccess() {
		return (pSystemDeclaration != null) ? pSystemDeclaration : (pSystemDeclaration = new SystemDeclarationElements());
	}
	
	public ParserRule getSystemDeclarationRule() {
		return getSystemDeclarationAccess().getRule();
	}

	//Declaration:
	//
	//	PropositionExpressionDeclaration | SituationDeclaration | SemanticConstraintDeclaration |
	//
	//	TransitionConstraintDeclaration | ExceptionDeclaration | ScopeDeclaration | PropertyDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//// END - MODEL
	//
	//PropositionExpressionDeclaration:
	//
	//	"prop" args+=PropositionDeclaration ("," args+=PropositionDeclaration)* ";";
	public PropositionExpressionDeclarationElements getPropositionExpressionDeclarationAccess() {
		return (pPropositionExpressionDeclaration != null) ? pPropositionExpressionDeclaration : (pPropositionExpressionDeclaration = new PropositionExpressionDeclarationElements());
	}
	
	public ParserRule getPropositionExpressionDeclarationRule() {
		return getPropositionExpressionDeclarationAccess().getRule();
	}

	//PropositionDeclaration:
	//
	//	name=ID;
	public PropositionDeclarationElements getPropositionDeclarationAccess() {
		return (pPropositionDeclaration != null) ? pPropositionDeclaration : (pPropositionDeclaration = new PropositionDeclarationElements());
	}
	
	public ParserRule getPropositionDeclarationRule() {
		return getPropositionDeclarationAccess().getRule();
	}

	//SituationDeclaration:
	//
	//	"situation" name=ID ":=" expression=LogicExpression ";";
	public SituationDeclarationElements getSituationDeclarationAccess() {
		return (pSituationDeclaration != null) ? pSituationDeclaration : (pSituationDeclaration = new SituationDeclarationElements());
	}
	
	public ParserRule getSituationDeclarationRule() {
		return getSituationDeclarationAccess().getRule();
	}

	//SemanticConstraintDeclaration:
	//
	//	"sconstraint" name=ID ":=" expression=LogicExpression ";";
	public SemanticConstraintDeclarationElements getSemanticConstraintDeclarationAccess() {
		return (pSemanticConstraintDeclaration != null) ? pSemanticConstraintDeclaration : (pSemanticConstraintDeclaration = new SemanticConstraintDeclarationElements());
	}
	
	public ParserRule getSemanticConstraintDeclarationRule() {
		return getSemanticConstraintDeclarationAccess().getRule();
	}

	//TransitionConstraintDeclaration:
	//
	//	"tconstraint" name=ID ":=" "pre" left=LogicExpression "post" right=LogicExpression ";";
	public TransitionConstraintDeclarationElements getTransitionConstraintDeclarationAccess() {
		return (pTransitionConstraintDeclaration != null) ? pTransitionConstraintDeclaration : (pTransitionConstraintDeclaration = new TransitionConstraintDeclarationElements());
	}
	
	public ParserRule getTransitionConstraintDeclarationRule() {
		return getTransitionConstraintDeclarationAccess().getRule();
	}

	//ExceptionDeclaration:
	//
	//	"exception" name=ID ":=" expression=LogicExpression ";";
	public ExceptionDeclarationElements getExceptionDeclarationAccess() {
		return (pExceptionDeclaration != null) ? pExceptionDeclaration : (pExceptionDeclaration = new ExceptionDeclarationElements());
	}
	
	public ParserRule getExceptionDeclarationRule() {
		return getExceptionDeclarationAccess().getRule();
	}

	//AbstractDeclaration:
	//
	//	PropositionDeclaration | SituationDeclaration;
	public AbstractDeclarationElements getAbstractDeclarationAccess() {
		return (pAbstractDeclaration != null) ? pAbstractDeclaration : (pAbstractDeclaration = new AbstractDeclarationElements());
	}
	
	public ParserRule getAbstractDeclarationRule() {
		return getAbstractDeclarationAccess().getRule();
	}

	//// BEGIN - HANDLERS
	//
	//ScopeDeclaration:
	//
	//	"scope" name=ID "handle" "(" exception=[ExceptionDeclaration] ")" "{" handlers+=HandlerDeclaration+ "}";
	public ScopeDeclarationElements getScopeDeclarationAccess() {
		return (pScopeDeclaration != null) ? pScopeDeclaration : (pScopeDeclaration = new ScopeDeclarationElements());
	}
	
	public ParserRule getScopeDeclarationRule() {
		return getScopeDeclarationAccess().getRule();
	}

	//HandlerDeclaration:
	//
	//	"case" "(" expression=LogicExpression ")" "{" actions+=ActionDeclaration+ //(propagation=PropagationDeclaration)?
	//
	//	"}";
	public HandlerDeclarationElements getHandlerDeclarationAccess() {
		return (pHandlerDeclaration != null) ? pHandlerDeclaration : (pHandlerDeclaration = new HandlerDeclarationElements());
	}
	
	public ParserRule getHandlerDeclarationRule() {
		return getHandlerDeclarationAccess().getRule();
	}

	//ActionDeclaration:
	//
	//	"do" expression=LogicExpression ";";
	public ActionDeclarationElements getActionDeclarationAccess() {
		return (pActionDeclaration != null) ? pActionDeclaration : (pActionDeclaration = new ActionDeclarationElements());
	}
	
	public ParserRule getActionDeclarationRule() {
		return getActionDeclarationAccess().getRule();
	}

	/// *PropagationDeclaration:
	//
	//	SignalDeclaration | RaiseDeclaration
	//
	//;
	//
	//
	//
	//SignalDeclaration:
	//
	//	'signal' '(' exception = [ExceptionDeclaration] ')' 'to' scope=[ScopeDeclaration] ';'
	//
	//;
	//
	//
	//
	//RaiseDeclaration:
	//
	//	'raise' '(' exception = [ExceptionDeclaration] ')'';'
	//
	//;* / //END - HANDLERS
	//
	//PropertyDeclaration:
	//
	//	"spec" name=ID ":=" expression=TemporalLogicExpression ";";
	public PropertyDeclarationElements getPropertyDeclarationAccess() {
		return (pPropertyDeclaration != null) ? pPropertyDeclaration : (pPropertyDeclaration = new PropertyDeclarationElements());
	}
	
	public ParserRule getPropertyDeclarationRule() {
		return getPropertyDeclarationAccess().getRule();
	}

	////BEGIN - LOGIC EXPRESSIONS
	//
	//LogicExpression:
	//
	//	OrExpression;
	public LogicExpressionElements getLogicExpressionAccess() {
		return (pLogicExpression != null) ? pLogicExpression : (pLogicExpression = new LogicExpressionElements());
	}
	
	public ParserRule getLogicExpressionRule() {
		return getLogicExpressionAccess().getRule();
	}

	//OrExpression returns LogicExpression:
	//
	//	AndExpression ({OrOpExpression.left=current} op="||" right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns LogicExpression:
	//
	//	RelationalExpression ({AndOpExpression.left=current} op="&&" right=RelationalExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//RelationalExpression returns LogicExpression:
	//
	//	AdditiveExpression ({RelationalOpExpression.left=current} op=("->" | "<->") right=AdditiveExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//AdditiveExpression returns LogicExpression:
	//
	//	{UnaryOpExpression} op="!" expr=PrimaryExpression | PrimaryExpression;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//PrimaryExpression returns LogicExpression:
	//
	//	"(" expr=LogicExpression ")" | value=[AbstractDeclaration] | opBin=BINARYOPERATOR "(" left=LogicExpression ","
	//
	//	right=LogicExpression ")" | opMul=MULTIPLEOPERATOR "(" args+=LogicExpression ("," args+=LogicExpression)+ ")";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//// BEGIN - TEMPORAL LOGIC EXPRESSIONS
	//
	//TemporalLogicExpression returns LogicExpression:
	//
	//	TemporalOrExpression;
	public TemporalLogicExpressionElements getTemporalLogicExpressionAccess() {
		return (pTemporalLogicExpression != null) ? pTemporalLogicExpression : (pTemporalLogicExpression = new TemporalLogicExpressionElements());
	}
	
	public ParserRule getTemporalLogicExpressionRule() {
		return getTemporalLogicExpressionAccess().getRule();
	}

	//TemporalOrExpression returns LogicExpression:
	//
	//	TemporalAndExpression ({OrOpExpression.left=current} op="||" right=TemporalAndExpression)*;
	public TemporalOrExpressionElements getTemporalOrExpressionAccess() {
		return (pTemporalOrExpression != null) ? pTemporalOrExpression : (pTemporalOrExpression = new TemporalOrExpressionElements());
	}
	
	public ParserRule getTemporalOrExpressionRule() {
		return getTemporalOrExpressionAccess().getRule();
	}

	//TemporalAndExpression returns LogicExpression:
	//
	//	TemporalRelationalExpression ({AndOpExpression.left=current} op="&&" right=TemporalRelationalExpression)*;
	public TemporalAndExpressionElements getTemporalAndExpressionAccess() {
		return (pTemporalAndExpression != null) ? pTemporalAndExpression : (pTemporalAndExpression = new TemporalAndExpressionElements());
	}
	
	public ParserRule getTemporalAndExpressionRule() {
		return getTemporalAndExpressionAccess().getRule();
	}

	//TemporalRelationalExpression returns LogicExpression:
	//
	//	TemporalAdditiveExpression ({RelationalOpExpression.left=current} op=("->" | "<->")
	//
	//	right=TemporalAdditiveExpression)*;
	public TemporalRelationalExpressionElements getTemporalRelationalExpressionAccess() {
		return (pTemporalRelationalExpression != null) ? pTemporalRelationalExpression : (pTemporalRelationalExpression = new TemporalRelationalExpressionElements());
	}
	
	public ParserRule getTemporalRelationalExpressionRule() {
		return getTemporalRelationalExpressionAccess().getRule();
	}

	//TemporalAdditiveExpression returns LogicExpression:
	//
	//	{UnaryOpExpression} op="!" expr=TemporalPrimaryExpression | TemporalPrimaryExpression;
	public TemporalAdditiveExpressionElements getTemporalAdditiveExpressionAccess() {
		return (pTemporalAdditiveExpression != null) ? pTemporalAdditiveExpression : (pTemporalAdditiveExpression = new TemporalAdditiveExpressionElements());
	}
	
	public ParserRule getTemporalAdditiveExpressionRule() {
		return getTemporalAdditiveExpressionAccess().getRule();
	}

	//TemporalPrimaryExpression returns LogicExpression:
	//
	//	"(" expr=TemporalLogicExpression ")" | value=[AbstractDeclaration] | opTemp=TEMPORALOPERATOR "("
	//
	//	temporal=TemporalLogicExpression ")" | opTempUntil=TEMPUNTILOPERATOR "(" leftExp=TemporalLogicExpression "U"
	//
	//	rightExp=TemporalLogicExpression ")" | opBin=BINARYOPERATOR "(" left=LogicExpression "," right=LogicExpression ")" |
	//
	//	opMul=MULTIPLEOPERATOR "(" args+=LogicExpression ("," args+=LogicExpression)+ ")";
	public TemporalPrimaryExpressionElements getTemporalPrimaryExpressionAccess() {
		return (pTemporalPrimaryExpression != null) ? pTemporalPrimaryExpression : (pTemporalPrimaryExpression = new TemporalPrimaryExpressionElements());
	}
	
	public ParserRule getTemporalPrimaryExpressionRule() {
		return getTemporalPrimaryExpressionAccess().getRule();
	}

	//// BEGIN - Enums
	//
	//enum MULTIPLEOPERATOR:
	//
	//	xor;
	public MULTIPLEOPERATORElements getMULTIPLEOPERATORAccess() {
		return (unknownRuleMULTIPLEOPERATOR != null) ? unknownRuleMULTIPLEOPERATOR : (unknownRuleMULTIPLEOPERATOR = new MULTIPLEOPERATORElements());
	}
	
	public EnumRule getMULTIPLEOPERATORRule() {
		return getMULTIPLEOPERATORAccess().getRule();
	}

	//enum BINARYOPERATOR:
	//
	//	nor | nand;
	public BINARYOPERATORElements getBINARYOPERATORAccess() {
		return (unknownRuleBINARYOPERATOR != null) ? unknownRuleBINARYOPERATOR : (unknownRuleBINARYOPERATOR = new BINARYOPERATORElements());
	}
	
	public EnumRule getBINARYOPERATORRule() {
		return getBINARYOPERATORAccess().getRule();
	}

	//enum TEMPORALOPERATOR:
	//
	//	EX | EG | EF | AX | AG | AF;
	public TEMPORALOPERATORElements getTEMPORALOPERATORAccess() {
		return (unknownRuleTEMPORALOPERATOR != null) ? unknownRuleTEMPORALOPERATOR : (unknownRuleTEMPORALOPERATOR = new TEMPORALOPERATORElements());
	}
	
	public EnumRule getTEMPORALOPERATORRule() {
		return getTEMPORALOPERATORAccess().getRule();
	}

	//enum TEMPUNTILOPERATOR:
	//
	//	E | A;
	public TEMPUNTILOPERATORElements getTEMPUNTILOPERATORAccess() {
		return (unknownRuleTEMPUNTILOPERATOR != null) ? unknownRuleTEMPUNTILOPERATOR : (unknownRuleTEMPUNTILOPERATOR = new TEMPUNTILOPERATORElements());
	}
	
	public EnumRule getTEMPUNTILOPERATORRule() {
		return getTEMPUNTILOPERATORAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
