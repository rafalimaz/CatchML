system UbiParking {
	prop atParkPlace, inMovement, atParkEntrance, atParkExit, hasSmoke, isSprinklerOn, isHot;

	situation outOfPark := !atParkEntrance && !atParkPlace && !atParkExit;

	sconstraint allPlacesDisjoined := xor(atParkEntrance, atParkPlace, atParkExit) || outOfPark;

	tconstraint t1 := pre outOfPark post !atParkPlace && !atParkExit;
	tconstraint t2 := pre atParkEntrance post !atParkExit;
	tconstraint t3 := pre atParkPlace post !atParkEntrance && !outOfPark;

	exception fireException := isHot && hasSmoke && !isSprinklerOn;

	scope fireScope handle (fireException) {
		case (inMovement && atParkPlace) {
			do isSprinklerOn && (inMovement && atParkExit);
			do isSprinklerOn && (inMovement && outOfPark);
		}
		case (inMovement && atParkExit) {
			do isSprinklerOn && (inMovement && outOfPark);
		}
	}
}